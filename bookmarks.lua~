MakeCommand("toggle_bookmark", "bookmarks.toggle", 0)
MakeCommand("next_bookmark", "bookmarks.goto_next", 0)

bookmarks = {}

function toggle()
	local view = CurView()
	local newMark = view.Cursor.Y
	
	local previousMark = false
	for i,v in ipairs(bookmarks) do
		if (v == newMark) then
			previousMark = true
			table.remove(bookmarks, i)
			CurView():ClearGutterMessages("bookmarks")
			table.sort(bookmarks)
			if #bookmarks ~= 0 then
				rebuildMarks()
			end
		end
	end
	
	if (previousMark == false) then	
		table.insert(bookmarks, newMark)
		view:GutterMessage("bookmarks", newMark + 1, "Bookmark added.", 1)
		table.sort(bookmarks)
	end
end

function rebuildMarks()
	local view = CurView()
	for i,v in ipairs(bookmarks) do
		view:GutterMessage("bookmarks", v + 1, "Bookmark removed.", 1)
	end
end

function goto_next()
	local view = CurView()
	local bookmarkTableSize = #bookmarks
	local currentMarkSpot = 0
	for i,v in ipairs(bookmarks) do
		if (view.Cursor.Y == v) then
			currentMarkSpot = v
		end
	end
	
	noFurtherMark = true
	for i,v in ipairs(bookmarks) do
		if (v > currentMarkSpot) then
			view.Cursor.Y = v
			noFurtherMark = false
			break
		end
	end
	
	if (noFurtherMark == true) then
		view.Cursor.Y = bookmarks[1]
	end
	CurView():Relocate()
end

BindKey("F5", "bookmarks.toggle")
BindKey("F6", "bookmarks.goto_next")
